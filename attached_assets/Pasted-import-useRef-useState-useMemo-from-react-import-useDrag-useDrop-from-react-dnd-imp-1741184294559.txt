import { useRef, useState, useMemo } from 'react';
import { useDrag, useDrop } from 'react-dnd';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { TimelineIcons, getAllIcons, getAllCategories, IconCategories, getIconsByCategory, TimelineIconType } from '@/lib/icons';
import { Button } from '@/components/ui/button';
import { format, addMinutes, parse } from 'date-fns';
import { X, Edit2, Check, Clock, MapPin, GripVertical } from 'lucide-react';
import { useSelector } from 'react-redux';
import { RootState } from '@/store/settingsSlice';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  SelectGroup,
  SelectLabel,
} from "@/components/ui/select";
import React from 'react';

interface TimelineItemProps {
  id: string;
  index: number;
  startTime: string;
  endTime: string;
  duration: string;
  title: string;
  description: string;
  location: string;
  type: string;
  category?: string;
  categories: string[];
  color?: string;
  allEvents: Array<{
    id: string;
    startTime: string;
    endTime: string;
    duration: string;
    title: string;
    location: string;
    type: string;
  }>;
  onMove: (dragIndex: number, hoverIndex: number) => void;
  onUpdate: (id: string, updates: Partial<{
    startTime: string;
    endTime: string;
    duration: string;
    title: string;
    description: string;
    location: string;
    type: string;
    category?: string;
  }>) => void;
  onDelete: (id: string) => void;
  initialEditMode?: boolean;
  bulkEditMode?: boolean;
  isSelected?: boolean;
  onSelect?: (id: string) => void;
  newItemId?: string | null;
}

export function TimelineItem({
  id,
  index,
  startTime,
  endTime,
  duration,
  title,
  description,
  location,
  type,
  category,
  categories,
  color = '#000000',
  allEvents,
  onMove,
  onUpdate,
  onDelete,
  initialEditMode = false,
  bulkEditMode = false,
  isSelected = false,
  onSelect,
  newItemId = null,
}: TimelineItemProps) {
  const [isEditing, setIsEditing] = useState(initialEditMode || id === newItemId);
  const [tempData, setTempData] = useState({
    startTime,
    duration,
    title,
    description,
    location,
    type,
    category
  });

  const ref = useRef<HTMLDivElement>(null);

  const { timeIncrement = 5, durationIncrement = 15 } = useSelector((state: RootState) => state.settings);

  const timeOptions = useMemo(() => {
    return Array.from({ length: 24 * (60 / timeIncrement) }, (_, i) => {
      const minutes = i * timeIncrement;
      const hours = Math.floor(minutes / 60);
      const mins = minutes % 60;
      return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;
    });
  }, [timeIncrement]);

  const durationOptions = useMemo(() => {
    const maxDuration = 24 * 60;
    return Array.from(
      { length: Math.floor(maxDuration / durationIncrement) },
      (_, i) => (i + 1) * durationIncrement
    ).filter(duration => duration <= maxDuration);
  }, [durationIncrement]);

  const handleCancel = () => {
    if (initialEditMode) {
      onDelete(id);
    } else {
      setIsEditing(false);
    }
  };

  const [{ isDragging }, drag] = useDrag({
    type: 'TIMELINE_ITEM',
    item: { id, index, startTime },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  const [, drop] = useDrop({
    accept: 'TIMELINE_ITEM',
    hover(item: { id: string; index: number; startTime: string }, monitor) {
      if (!ref.current) return;

      const dragIndex = item.index;
      const hoverIndex = index;

      if (dragIndex === hoverIndex) return;

      let newStartTime = startTime;
      if (allEvents.length > 0) {
        if (dragIndex > hoverIndex && hoverIndex > 0) {
          const prevEvent = allEvents[hoverIndex - 1];
          const prevEndTime = format(
            addMinutes(
              parse(prevEvent.startTime, 'HH:mm', new Date()),
              parseInt(prevEvent.duration)
            ),
            'HH:mm'
          );
          newStartTime = prevEndTime;
        } else if (dragIndex < hoverIndex && hoverIndex < allEvents.length - 1) {
          const nextEvent = allEvents[hoverIndex + 1];
          const currentDuration = parseInt(allEvents[dragIndex].duration);
          newStartTime = format(
            addMinutes(
              parse(nextEvent.startTime, 'HH:mm', new Date()),
              -currentDuration
            ),
            'HH:mm'
          );
        }
      }

      onMove(dragIndex, hoverIndex);
      onUpdate(item.id, { startTime: newStartTime });
      item.index = hoverIndex;
    },
  });

  drag(drop(ref));

  const handleSave = () => {
    const updates = {
      ...tempData,
      endTime: tempData.startTime
    };

    const startDateTime = parse(tempData.startTime, 'HH:mm', new Date());
    const durationMinutes = parseInt(tempData.duration) || 0;
    const newEndTime = format(addMinutes(startDateTime, durationMinutes), 'HH:mm');
    updates.endTime = newEndTime;

    onUpdate(id, updates);
    setIsEditing(false);
  };

  // Get the correct icon component
  const IconComponent = TimelineIcons[type as keyof typeof TimelineIcons]?.icon || TimelineIcons.event.icon;

  if (isEditing) {
    return (
      <div
        ref={ref}
        className={`p-6 rounded-lg border shadow-sm ${isDragging ? 'opacity-50' : ''}`}
        style={{ borderColor: color }}
      >
        <div className="space-y-4">
          <div className="flex gap-4">
            <div className="flex-1">
              <Input
                value={tempData.title}
                onChange={(e) => setTempData(prev => ({ ...prev, title: e.target.value }))}
                className="w-full font-serif text-xl"
                placeholder="Event title"
              />
            </div>
            <Select
              value={tempData.type}
              onValueChange={(value) => setTempData(prev => ({ ...prev, type: value }))}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Select icon" />
              </SelectTrigger>
              <SelectContent>
                {getAllCategories().map((category) => (
                  <SelectGroup key={category}>
                    <SelectLabel>{category}</SelectLabel>
                    {Object.entries(getIconsByCategory(category)).map(([key, value]) => (
                      <SelectItem key={key} value={key}>
                        <div className="flex items-center gap-2">
                          {React.createElement(value.icon, { className: "w-4 h-4" })}
                          <span>{value.label}</span>
                        </div>
                      </SelectItem>
                    ))}
                  </SelectGroup>
                ))}
              </SelectContent>
            </Select>
          </div>

          {categories.length > 0 && (
            <Select
              value={tempData.category}
              onValueChange={(value) => setTempData(prev => ({ ...prev, category: value }))}
            >
              <SelectTrigger className="w-full">
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((cat) => (
                  <SelectItem key={cat} value={cat}>
                    {cat}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          )}

          <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
            <div>
              <label className="text-sm font-medium text-foreground mb-1.5 block">Start Time</label>
              <Select
                value={tempData.startTime}
                onValueChange={(value) => setTempData(prev => ({ ...prev, startTime: value }))}
              >
                <SelectTrigger className="w-full font-serif">
                  <SelectValue placeholder="Select start time" />
                </SelectTrigger>
                <SelectContent>
                  {timeOptions.map((timeString) => (
                    <SelectItem key={timeString} value={timeString}>
                      {timeString}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium text-foreground mb-1.5 block">Duration</label>
              <Select
                value={tempData.duration}
                onValueChange={(value) => setTempData(prev => ({ ...prev, duration: value }))}
              >
                <SelectTrigger className="w-full font-serif">
                  <SelectValue placeholder="Select duration" />
                </SelectTrigger>
                <SelectContent>
                  {durationOptions.map((minutes) => (
                    <SelectItem key={minutes} value={minutes.toString()}>
                      {minutes} minutes {minutes >= 60 ? `(${Math.floor(minutes / 60)}h${minutes % 60 ? ` ${minutes % 60}m` : ''})` : ''}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium text-foreground mb-1.5 block">Location</label>
              <Input
                value={tempData.location}
                onChange={(e) => setTempData(prev => ({ ...prev, location: e.target.value }))}
                className="font-serif"
                placeholder="Event location"
              />
            </div>
          </div>

          <div>
            <label className="text-sm font-medium text-foreground mb-1.5 block">Description</label>
            <Textarea
              value={tempData.description}
              onChange={(e) => setTempData(prev => ({ ...prev, description: e.target.value }))}
              className="font-serif resize-y min-h-[100px]"
              placeholder="Add event description..."
              rows={4}
            />
          </div>

          <div className="flex justify-end gap-2">
            <Button
              variant="outline"
              onClick={handleCancel}
              className="font-serif"
            >
              <X className="w-4 h-4 mr-1" /> Cancel
            </Button>
            <Button
              variant="default"
              onClick={handleSave}
              className="font-serif"
            >
              <Check className="w-4 h-4 mr-1" /> Save
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div
      ref={ref}
      className={`flex bg-white gap-4 p-4 rounded-lg border shadow-sm cursor-pointer
        ${isDragging ? 'opacity-50' : ''} 
        ${bulkEditMode ? 'cursor-pointer' : ''} 
        ${isSelected ? 'border-primary bg-primary/5' : 'hover:border-accent'} 
        group transition-all duration-200 ease-in-out hover:shadow-md`}
      style={{ borderLeft: `4px solid ${color}` }}
      onClick={(e) => {
        if (bulkEditMode && onSelect) {
          onSelect(id);
        } else if (!bulkEditMode) {
          // Don't trigger edit mode if clicking on action buttons
          if (!(e.target as HTMLElement).closest('.action-buttons')) {
            setIsEditing(true);
          }
        }
      }}
    >
      <div className="flex items-center">
        {bulkEditMode ? (
          <div className={`w-5 h-5 rounded border ${isSelected ? 'bg-primary border-primary' : 'border-muted-foreground'} flex items-center justify-center`}>
            {isSelected && <Check className="w-3 h-3 text-primary-foreground" />}
          </div>
        ) : (
          <GripVertical className="w-5 h-5 text-muted-foreground/80 cursor-move opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
        )}
      </div>

      <div className="flex-shrink-0 text-center pr-4 border-r border-border">
        <div className="font-serif text-2xl text-foreground">{startTime}</div>
        <div className="text-sm text-muted-foreground/90">{duration} mins</div>
      </div>

      <div className="flex-1 min-w-0">
        <div className="flex items-center gap-2 mb-2">
          {React.createElement(IconComponent, { className: "w-5 h-5 text-foreground" })}
          <div className="flex-1 flex items-center justify-between">
            <h3 className="font-serif text-lg font-medium text-foreground truncate">{title}</h3>
          </div>
        </div>

        {description && (
          <p className="mt-1 text-sm text-muted-foreground/90 whitespace-pre-wrap line-clamp-3">
            {description}
          </p>
        )}
        {location && (
          <div className="mt-2 flex items-center text-sm text-muted-foreground/90">
            <MapPin className="w-4 h-4 mr-1 flex-shrink-0" />
            <span className="truncate">{location}</span>
          </div>
        )}
      </div>

      <div className="flex items-start gap-1 flex-shrink-0 action-buttons opacity-0 group-hover:opacity-100 transition-opacity duration-200">
        <Button
          variant="ghost"
          size="sm"
          onClick={(e) => {
            e.stopPropagation();
            onDelete(id);
          }}
          className="text-muted-foreground hover:text-destructive"
        >
          <X className="w-4 h-4" />
        </Button>
      </div>
    </div>
  );
}